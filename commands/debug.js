const { SlashCommandBuilder } = require('discord.js');
const db = require('../database/database.js'); // Ajuste o caminho conforme necess√°rio

module.exports = {
    data: new SlashCommandBuilder()
        .setName('debug')
        .setDescription('ADMIN | üëæ Uso somente para usu√°rio autorizados.')
        .addUserOption(option =>
            option.setName('usuario')
                .setDescription('O usu√°rio que voc√™ deseja ajustar a reputa√ß√£o.')
                .setRequired(true))
        .addStringOption(option =>
            option.setName('a√ß√£o')
                .setDescription('Adicionar ou remover pontos de reputa√ß√£o.')
                .setRequired(true)
                .addChoices(
                    { name: 'adicionar', value: 'add' },
                    { name: 'remover', value: 'remove' }))
        .addIntegerOption(option =>
            option.setName('quantidade')
                .setDescription('A quantidade de pontos de reputa√ß√£o para ajustar.')
                .setRequired(true)),
    async execute(interaction) {
        // Verifica√ß√£o de permiss√£o
        if (interaction.user.id !== '298217216858521612') {
            return interaction.reply({ content: '‚ùå Voc√™ n√£o tem permiss√£o para usar este comando.', ephemeral: true });
        }

        const user = interaction.options.getUser('usuario');
        const action = interaction.options.getString('a√ß√£o');
        const amount = interaction.options.getInteger('quantidade');

        // N√£o permitir ajuste de reputa√ß√£o de bots
        if (user.bot) {
            return interaction.reply({ content: '‚ùå N√£o √© poss√≠vel ajustar a reputa√ß√£o de bots.', ephemeral: true });
        }

        try {
            // Verifica se o usu√°rio j√° existe na base de dados
            const userData = await db.get(`SELECT * FROM users WHERE id = ?`, [user.id]);

            // Se o usu√°rio n√£o existir, insere com reputa√ß√£o inicial 0
            if (!userData) {
                await db.run(`INSERT INTO users (id, username, reputation) VALUES (?, ?, 0)`, [user.id, user.username]);
            }

            // L√≥gica de adi√ß√£o ou remo√ß√£o de reputa√ß√£o
            const newReputation = action === 'add' ? (userData ? userData.reputation + amount : amount) : (userData ? Math.max(0, userData.reputation - amount) : 0);

            // Atualiza a reputa√ß√£o do usu√°rio
            await db.run(`UPDATE users SET reputation = ? WHERE id = ?`, [newReputation, user.id]);

            await interaction.reply({ content: `‚öôÔ∏è A reputa√ß√£o de **${user.username}** foi ${action === 'add' ? '**‚ûï Aumentada**' : '**‚ûñ Diminu√≠da**'} em **${amount}**.` });

        } catch (err) {
            console.error('Erro ao ajustar a reputa√ß√£o:', err);
            await interaction.reply({ content: '‚ùå Ocorreu um erro ao ajustar a reputa√ß√£o.', ephemeral: true });
        }
    },
};
